#!/bin/bash

. /usr/local/etc/allstar.env
#sleep 1
echo "$(date "+%F %T")- $0 $*">>/dev/shm/remote.log

# parse the command line input
INPUT=$1
CMD=${INPUT:0:1}
DATA=${INPUT:1}

# set the radio id for hamlib
# IC-7000
#RADIO="360"
# IC-7100
RADIO="3070"

# have to give the node number to say the frequency out of
# set it expicitly here or...
#NODE=46874
# use the one defined as NODE1 in the allstar env
NODE=${NODE1}

# Define the serial port here.
# This is the onboard TTL (3.3v) serial port available on the 40 pin header
# You can use it for TTL level stuff but must disable it from use by the OS first.
#SERIAL="/dev/ttyAMA0"
# Usually it is /dev/ttyUSB0 for the first USB adapter
SERIAL="/dev/ttyUSB0"
# Usually it is /dev/ttyUSB1 for the second USB adapter
#SERIAL="/dev/ttyUSB1"

# set for the baud you have your radio configured for
BAUD="19200"

# Wait for radio node to stop tranmitting
function WaitNoTx () {
    echo "WaitNoTx">>/dev/shm/remote.log
    sleep 1
    while [ -f /dev/shm/out1999 ]; do
        sleep 0.5
    done;
    echo "WaitNoTx return">>/dev/shm/remote.log
}

function SetDigital () {
    echo "SetDigital">>/dev/shm/remote.log
    local myRTN=$(rigctl -m ${RADIO} -r ${SERIAL} -s ${BAUD} m)
#   echo $myRTN
    local myMODE=$(echo ${myRTN} | cut -d' ' -f1)
    local myFILTER=$(echo ${myRTN} | cut -d' ' -f2)
    echo "Mode: ${myMODE}"
    echo "Filter: ${myFILTER}"
    if [ "D-STAR" == ${myMODE} ]; then
        # which means can't access D-STAR remotely either
        echo "SetDigital return 1">>/dev/shm/remote.log
        return
    fi
    if [ "PKT" == "${myMODE:0:3}" ]; then
        if ! $1; then
            rigctl -m ${RADIO} -r ${SERIAL} -s ${BAUD} M ${myMODE:3} ${myFILTER}
        fi
        echo "SetDigital return 2">>/dev/shm/remote.log
        return
    elif $1; then
        rigctl -m ${RADIO} -r ${SERIAL} -s ${BAUD} M "PKT"${myMODE} ${myFILTER}
    fi
    echo "SetDigital return 3">>/dev/shm/remote.log
}

# Increment squelch until closed then add last argument as fudge.
function AutoSquelch () {
    echo "AutoSquelch">>/dev/shm/remote.log
    local FUDGE=$1
    local SQL_LEVEL=0
    echo "Searching for threshold..."
    for i in {0..100}; do
        SQL_LEVEL=$(echo "scale=2;${i}/100" | bc -l)
#        echo $SQL_LEVEL
        rigctl -m ${RADIO} -r ${SERIAL} -s ${BAUD} L SQL ${SQL_LEVEL}
        [ -f /dev/shm/in1999 ] || break
    done
    # add fudge
    SQL_LEVEL=$(echo "scale=2; ${SQL_LEVEL}+${FUDGE}/100" | bc -l)
    echo "Setting squelch to $SQL_LEVEL"
    rigctl -m ${RADIO} -r ${SERIAL} -s ${BAUD} L SQL ${SQL_LEVEL}
    echo "AutoSquelch return">>/dev/shm/remote.log
    
}

# Read the frequency from the radio and speak it.
# Counts the length to determine how to say it
# assuming the number is full Hz value
function SayFreq () {
    echo "SayFreq">>/dev/shm/remote.log
    echo "SayFreq"
    #wait to stop NOT echoing tones but keying
    asterisk -rx "rpt fun 46874 *711999"
    asterisk -rx "rpt fun 46874 *11999"
    WaitNoTx
    FREQ=$(rigctl -m ${RADIO} -r ${SERIAL} -s ${BAUD} f)
    echo "FREQ: $FREQ"
    FREQLEN=${#FREQ}
    case $FREQLEN in
    9) #like 147330000
        speaktext.sh -g " ${FREQ:0:3},${FREQ:3:3}.${FREQ:6:3}" ${NODE}
    ;;
    8) #like 50125000
        speaktext.sh -g " ${FREQ:0:2},${FREQ:2:3}.${FREQ:5:3}" ${NODE}
    ;;
    7) #like 3975000
        speaktext.sh -g " ${FREQ:0:1},${FREQ:1:3}.${FREQ:4:3}" ${NODE}
    ;;
    6) #like 620000
        speaktext.sh -g " ${FREQ:0:3}.${FREQ:3:3}" ${NODE}
    ;;
    5) #like 25000
        speaktext.sh -g " ${FREQ:0:2}.${FREQ:2:3}" ${NODE}
    ;;
    *) #like anything else
        speaktext.sh -g " ${FREQ}" ${NODE}
    ;;
    esac
    #reconnect after speaking finishes
    (sleep 5; while [  -f /dev/shm/out1999 ] || -f /dev/shm/out46874 ];do sleep 1; done; asterisk -rx "rpt fun 46874 *31999" &>/dev/null) &
    echo "SayFreq return">>/dev/shm/remote.log
}

function SetRadio () {
    case $CMD in
        0) #say freq
            SayFreq
        ;;
        1)	#select bank,mem,mem
            rigctl -m ${RADIO} -r ${SERIAL} -s ${BAUD} B ${DATA:0:1} E ${DATA:1}
            SayFreq
        ;;
        2)  #step up nnn Hz *622100 steps up 100 Hz (3 digit max)
            FREQ=$(rigctl -m ${RADIO} -r ${SERIAL} -s ${BAUD} f)
            echo ${FREQ}
            let FREQ=${FREQ}+${DATA}
            echo ${FREQ}
            rigctl -m ${RADIO} -r ${SERIAL} -s ${BAUD} F ${FREQ}
            SayFreq
        ;;
        3)  #step down nnn Hz - *623010 steps down 10 Hz (3 digit max)
            FREQ=$(rigctl -m ${RADIO} -r ${SERIAL} -s ${BAUD} f)
            let FREQ=$FREQ-${DATA}
            rigctl -m ${RADIO} -r ${SERIAL} -s ${BAUD} F ${FREQ}
            SayFreq
        ;;
        4)  #LSB mode (IC-7000 requires filter width with mode)
            rigctl -m ${RADIO} -r ${SERIAL} -s ${BAUD} M LSB 2400
        ;;
        5)  #USB mode (IC-7000 requires filter width with mode)
            rigctl -m ${RADIO} -r ${SERIAL} -s ${BAUD} M USB 2400
        ;;
        6)  #FM mode (IC-7000 requires filter width with mode)
            rigctl -m ${RADIO} -r ${SERIAL} -s ${BAUD} M FM 15000
        ;;
        7)  #AM mode (IC-7000 requires filter width with mode)
            rigctl -m ${RADIO} -r ${SERIAL} -s ${BAUD} M AM 6000
        ;;
        8)  #Antenna Tune
            rigctl -m ${RADIO} -r ${SERIAL} -s ${BAUD} G TUNE
        ;;
        9) #set squelch
            if [ "${DATA:0:1}" == "0" ] || [ "$DATA:0:1}" == "1" ]; then
                rigctl -m ${RADIO} -r ${SERIAL} -s ${BAUD} L SQL ${DATA:0:1}.${DATA:1}
            elif [ "${DATA:0:1}" == 9 ]; then
                AutoSquelch ${DATA:1}
            fi
        ;;
        T) #pass on param for testing
            rigctl -m ${RADIO} -r ${SERIAL} -s ${BAUD} ${DATA}
        ;;
    esac
}

# work actually starts here...
SetRadio
SetDigital true

exit 0
